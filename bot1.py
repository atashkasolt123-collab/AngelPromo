import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler, # –ò–º–ø–æ—Ä—Ç ConversationHandler
)
import random
import datetime
import os # –î–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# ... (–≤–∞—à —Ç–æ–∫–µ–Ω, ID –∞–¥–º–∏–Ω–∞, ID —á–∞—Ç–∞, promo_codes) ...
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', "8301185082:AAGUKofUSYK6tA4fJfjOlxdLJH3OApGYAxU") # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_USER_ID = int(os.environ.get('ADMIN_USER_ID', 7313407194))
CHAT_ID = -1002920370736 # –ü—Ä–∏–º–µ—Ä ID —á–∞—Ç–∞

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

promo_codes = {}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
GET_PROMO_NAME, GET_PROMO_ACTIVATIONS, GET_PROMO_COST, GET_PROMO_CONDITION = range(4)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) ---
def build_admin_keyboard():
    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promo")],
        [InlineKeyboardButton("–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="manage_promos")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_manage_promos_keyboard():
    keyboard = []
    if promo_codes:
        for code, data in promo_codes.items():
            keyboard.append([
                InlineKeyboardButton(f"–ü—Ä–æ–º–æ: {code} ({data['activations_left']} –æ—Å—Ç–∞–ª–æ—Å—å)", callback_data=f"promo_details_{code}")
            ])
    else:
        keyboard.append([InlineKeyboardButton("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="no_promos")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel")])
    return InlineKeyboardMarkup(keyboard)

def build_promo_details_keyboard(code):
    keyboard = [
        [InlineKeyboardButton("‚ûï –ü—Ä–∏–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é", callback_data=f"add_activation_{code}"),
         InlineKeyboardButton("‚ûñ –£–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é", callback_data=f"remove_activation_{code}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"delete_promo_{code}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="manage_promos")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id == ADMIN_USER_ID:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–∞–∑–∏–Ω–æ AngelWin!",
            reply_markup=build_admin_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞—á—É –≤ –∫–∞–∑–∏–Ω–æ AngelWin!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üöÄ –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ", url="https://t.me/your_casino_bot_or_link")]]) # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –∫–∞–∑–∏–Ω–æ
        )

async def handle_promo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    message_text = update.message.text.upper()
    if message_text.startswith("/PROMO "):
        promo_code = message_text.split("/PROMO ")[1].strip()
        if promo_code in promo_codes:
            promo_data = promo_codes[promo_code]
            if promo_data["activations_left"] > 0:
                await update.message.reply_text(
                    f"üåü **–ü—Ä–æ–º–æ–∫–æ–¥ \"{promo_code}\"** üåü\n\n"
                    f"‚ú® –£—Å–ª–æ–≤–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {promo_data['condition']} ‚ú®\n\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {promo_data['cost']}$ üí∞\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {promo_data['activations_left']} ‚è≥\n\n"
                    f"üöÄ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [@pensiya_get](tg://user?id=7313407194) –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥ \"{promo_code}\" —É–∂–µ –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                    parse_mode='Markdown'
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode='Markdown'
            )

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è ConversationHandler ---

async def create_promo_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, New):")
    return GET_PROMO_NAME

async def get_promo_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    promo_name = update.message.text.strip().upper()
    if not promo_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return GET_PROMO_NAME # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    context.user_data['new_promo_name'] = promo_name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—á–∏—Å–ª–æ):")
    return GET_PROMO_ACTIVATIONS

async def get_promo_activations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π."""
    try:
        activations = int(update.message.text.strip())
        if activations <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return GET_PROMO_ACTIVATIONS
        context.user_data['new_promo_activations'] = activations
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ $ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1):")
        return GET_PROMO_COST
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.")
        return GET_PROMO_ACTIVATIONS

async def get_promo_cost(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."""
    try:
        cost = float(update.message.text.strip())
        if cost < 0:
            await update.message.reply_text("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return GET_PROMO_COST
        context.user_data['new_promo_cost'] = cost
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ù–∞–±—Ä–∞—Ç—å 0.2$ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –∫–∞–∑–∏–Ω–æ!):")
        return GET_PROMO_CONDITION
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
        return GET_PROMO_COST

async def get_promo_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    promo_name = context.user_data.get('new_promo_name')
    activations = context.user_data.get('new_promo_activations')
    cost = context.user_data.get('new_promo_cost')
    condition = update.message.text.strip()

    if not all([promo_name, activations is not None, cost is not None, condition]):
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('new_promo_name', None)
        context.user_data.pop('new_promo_activations', None)
        context.user_data.pop('new_promo_cost', None)
        return ConversationHandler.END # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

    promo_codes[promo_name] = {
        "activations_left": activations,
        "cost": cost,
        "condition": condition,
        "created_by": ADMIN_USER_ID,
        "creation_date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    }

    await update.message.reply_text(
        f"‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ \"{promo_name}\" —Å–æ–∑–¥–∞–Ω!** ‚úÖ\n\n"
        f"üåü –£—Å–ª–æ–≤–∏–µ: {condition}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}$\n"
        f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n\n"
        f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/promo {promo_name}`.",
        reply_markup=build_admin_keyboard(), # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
        parse_mode='Markdown'
    )

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    context.user_data.pop('new_promo_name', None)
    context.user_data.pop('new_promo_activations', None)
    context.user_data.pop('new_promo_cost', None)

    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=build_admin_keyboard())
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    context.user_data.pop('new_promo_name', None)
    context.user_data.pop('new_promo_activations', None)
    context.user_data.pop('new_promo_cost', None)
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Inline –∫–Ω–æ–ø–æ–∫ ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if user_id != ADMIN_USER_ID:
        await query.edit_message_text(text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if data == "admin_panel":
        await query.edit_message_text(
            text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–∞–∑–∏–Ω–æ AngelWin!",
            reply_markup=build_admin_keyboard()
        )
    elif data == "create_promo":
        # –ù–∞—á–∏–Ω–∞–µ–º ConversationHandler
        return await create_promo_start(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã ConversationHandler –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É
    elif data == "manage_promos":
        await query.edit_message_text(
            text="–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:",
            reply_markup=build_manage_promos_keyboard()
        )
    elif data == "back_to_menu":
        await query.edit_message_text(text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–∞–∑–∏–Ω–æ AngelWin!", reply_markup=build_admin_keyboard())
    elif data == "no_promos": # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        await query.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")

    elif data.startswith("promo_details_"):
        code = data.split("_")[2]
        if code in promo_codes:
            promo_data = promo_codes[code]
            await query.edit_message_text(
                text=f"‚öôÔ∏è **–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {code}** ‚öôÔ∏è\n\n"
                     f"üåü –£—Å–ª–æ–≤–∏–µ: {promo_data['condition']}\n"
                     f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {promo_data['cost']}$\n"
                     f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {promo_data['activations_left']}\n"
                     f"üìÖ –°–æ–∑–¥–∞–Ω: {promo_data.get('creation_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                reply_markup=build_promo_details_keyboard(code),
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(text="‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif data.startswith("add_activation_"):
        code = data.split("_")[2]
        if code in promo_codes:
            promo_codes[code]["activations_left"] += 1
            await query.edit_message_text(
                text=f"üëç –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ \"{code}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ: {promo_codes[code]['activations_left']}",
                reply_markup=build_promo_details_keyboard(code)
            )
        else:
            await query.edit_message_text(text="‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif data.startswith("remove_activation_"):
        code = data.split("_")[2]
        if code in promo_codes:
            if promo_codes[code]["activations_left"] > 0:
                promo_codes[code]["activations_left"] -= 1
                await query.edit_message_text(
                    text=f"üëé –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ \"{code}\" —É–±–∞–≤–ª–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å: {promo_codes[code]['activations_left']}",
                    reply_markup=build_promo_details_keyboard(code)
                )
            else:
                await query.edit_message_text(text="‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏–π —É–∂–µ 0, –Ω–µ–ª—å–∑—è —É–±–∞–≤–∏—Ç—å.")
        else:
            await query.edit_message_text(text="‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    elif data.startswith("delete_promo_"):
        code = data.split("_")[2]
        if code in promo_codes:
            del promo_codes[code]
            await query.edit_message_text(text=f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ \"{code}\" —É–¥–∞–ª–µ–Ω.", reply_markup=build_manage_promos_keyboard())
        else:
            await query.edit_message_text(text="‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # --- ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_callback, pattern="^create_promo$")], # –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        states={
            GET_PROMO_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_promo_name)],
            GET_PROMO_ACTIVATIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_promo_activations)],
            GET_PROMO_COST: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_promo_cost)],
            GET_PROMO_CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_promo_condition)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation), # –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞
            CallbackQueryHandler(cancel_conversation, pattern="^cancel_promo$"), # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: c.bot.send_message(chat_id=u.effective_chat.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.")), # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        ],
        per_user=True, # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        per_message=False # –î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç—Å—è
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_promo)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥ ConversationHandler, –µ—Å–ª–∏ /promo –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥)

    application.add_handler(conv_handler) # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler
    application.add_handler(CallbackQueryHandler(button_callback)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()